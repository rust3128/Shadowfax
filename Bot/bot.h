#ifndef BOT_H
#define BOT_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QTimer>

class Bot : public QObject {
    Q_OBJECT
public:
    explicit Bot(QObject *parent = nullptr);
    void startPolling();  // –ü–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    void sendMessage(qint64 chatId, const QString &text);  // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    static void initLogging();  // üîπ –ú–µ—Ç–æ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—É–≤–∞–Ω–Ω—è

private slots:
    void getUpdates();  // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

private:
    void loadBotToken();                                                 // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ `config.ini`
    void handleStartCommand(qint64 chatId);  // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ `/start`
    void handleHelpCommand(qint64 chatId);   // üîπ –û–±—Ä–æ–±–∫–∞ `/help`
    void handleClientsCommand(qint64 chatId);// üîπ –û–±—Ä–æ–±–∫–∞ `/clients`

    void fetchClientsList();                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ GET /clients.
    void processClientsResponse(const QByteArray &data); //–û–±—Ä–æ–±–ª—è—î–º–æ GET /clients.
    void sendMessageWithKeyboard(const QJsonObject &payload);
    bool isUserAuthorized(qint64 chatId);           // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó
    void processClientsList(qint64 chatId, const QByteArray &data);
private:
    QNetworkAccessManager *networkManager;
    QString botToken;
    qint64 lastUpdateId;  // –û—Å—Ç–∞–Ω–Ω—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–∏–π update_id
    qint64 lastChatId = 0;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π Chat ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    QMap<QString, qint64> clientIdMap;  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ "–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞" -> ID
    qint64 lastSelectedClientId = 0;  // ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    bool waitingForTerminal = false;  // –ß–∏ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É?


};

#endif // BOT_H
