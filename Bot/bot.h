#ifndef BOT_H
#define BOT_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QTimer>
#include <tuple>
#include <QMap>

class Bot : public QObject {
    Q_OBJECT
public:
    explicit Bot(QObject *parent = nullptr);
    void startPolling();  // –ü–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    void sendMessage(qint64 chatId, const QString &text, bool isHtml = true); // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    static void initLogging();  // üîπ –ú–µ—Ç–æ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—É–≤–∞–Ω–Ω—è

private slots:
    void getUpdates();  // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

private:
    void loadBotToken();                                                 // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ `config.ini`
    void handleStartCommand(qint64 chatId);  // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ `/start`
    void handleHelpCommand(qint64 chatId);   // üîπ –û–±—Ä–æ–±–∫–∞ `/help`
    void handleClientsCommand(qint64 chatId);// üîπ –û–±—Ä–æ–±–∫–∞ `/clients`

    void fetchClientsList();                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ GET /clients.
    void processClientsResponse(const QByteArray &data); //–û–±—Ä–æ–±–ª—è—î–º–æ GET /clients.
    void sendMessageWithKeyboard(const QJsonObject &payload);
    bool isUserAuthorized(qint64 chatId);           // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—ó
    void processClientsList(qint64 chatId, const QByteArray &data);
    bool authorizeUser(qint64 chatId);               // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    void processMessage(qint64 chatId, qint64 userId, const QString &text, const QString &firstName, const QString &lastName, const QString &username); //–æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫
    void requestAdminApproval(qint64 userId, qint64 chatId, const QString &firstName, const QString &lastName, const QString &username);
    void handleApproveCommand(qint64 chatId, qint64 userId, const QString &text);
    void handleRejectCommand(qint64 chatId, qint64 userId, const QString &text);
    void handleTerminalSelection(qint64 chatId);
    void handleAzsList(qint64 chatId);
    void handleRroInfo(qint64 chatId);
    void handlePrkInfo(qint64 chatId);
    void handleReservoirInfo(qint64 chatId);


    void processClientSelection(qint64 chatId, const QString &clientName); //–æ–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞
    void processTerminalInput(qint64 chatId, const QString &cleanText);     //–æ–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
    void fetchTerminalInfo(qint64 chatId, qint64 clientId, int terminalId); // * @brief –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç —É Palant√≠r –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª
    void processTerminalInfo(qint64 chatId, const QByteArray &data);        //@brief –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å Palant√≠r —ñ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª

private:
    QNetworkAccessManager *networkManager;
    QString botToken;
    qint64 lastUpdateId;  // –û—Å—Ç–∞–Ω–Ω—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–∏–π update_id
    qint64 lastChatId = 0;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π Chat ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    QMap<QString, qint64> clientIdMap;  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ "–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞" -> ID
    qint64 lastSelectedClientId = 0;  // ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    qint64 lastSelectedTerminalId;  // ‚úÖ –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
    bool waitingForTerminal = false;  // –ß–∏ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É?
    QMap<qint64, std::tuple<QString, QString, QString>> lastApprovalRequest;
};

#endif // BOT_H
