
#include "bot.h"
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QNetworkReply>
#include <QDebug>
#include <QSettings>
#include <QFile>
#include <QDir>
#include <QTextStream>
#include <QCoreApplication>
#include <QDateTime>
#include <QRegularExpression>

static QFile logFile;


Bot::Bot(QObject *parent) : QObject(parent) {
    lastUpdateId = 0;  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ update_id
    networkManager = new QNetworkAccessManager(this);
    loadBotToken();
}

/**
 * @brief –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª
 */
void Bot::initLogging() {
    QString logDirPath = QCoreApplication::applicationDirPath() + "/logs";
    QDir logDir(logDirPath);
    if (!logDir.exists()) {
        logDir.mkpath(".");
    }

    QString logFilePath = logDirPath + "/shadowfax.log";
    logFile.setFileName(logFilePath);

    if (!logFile.open(QIODevice::Append | QIODevice::Text)) {
        qCritical() << "Failed to open log file for writing!";
        return;
    }

    // üîπ –û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ª–æ–≥—ñ–≤
    qInstallMessageHandler([](QtMsgType type, const QMessageLogContext &, const QString &msg) {
        QString logEntry = QString("[%1] %2")
        .arg(QDateTime::currentDateTime().toString("yyyy-MM-dd HH:mm:ss"))
            .arg(msg);

        QTextStream logStream(&logFile);
        logStream << logEntry << "\n";  // üîπ –ó–∞–ø–∏—Å—É—î–º–æ —É —Ñ–∞–π–ª
        logStream.flush();

        QTextStream consoleStream(stdout);
        consoleStream << logEntry << Qt::endl;  // üîπ –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    });

    qDebug() << "Logging initialized. Log file:" << logFilePath;
}


/**
 * @brief –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ `config.ini` –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
 */
void Bot::loadBotToken() {
    QString configPath = QCoreApplication::applicationDirPath() + "/config/config.ini";
    qDebug() << "Checking config file at:" << configPath;

    QFile configFile(configPath);

    // üîπ –Ø–∫—â–æ `config.ini` –Ω–µ —ñ—Å–Ω—É—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    if (!configFile.exists()) {
        qWarning() << "Config file not found! Creating `config.ini`...";

        QDir configDir(QFileInfo(configPath).absolutePath());
        if (!configDir.exists()) {
            configDir.mkpath(".");
            qDebug() << "Config directory created.";
        }

        if (configFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&configFile);
            out << "[Telegram]\n";
            out << "bot_token=\n";  // üîπ –ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω
            configFile.close();
            qCritical() << "Please enter the bot token in config.ini and restart the application.";
            QCoreApplication::exit(1);
            return;
        } else {
            qCritical() << "Failed to create config.ini!";
        }
    }

    // üîπ –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
    QSettings settings(configPath, QSettings::IniFormat);
    botToken = settings.value("Telegram/bot_token", "").toString();
    qDebug() << "Read bot token from config.ini:" << (botToken.isEmpty() ? "EMPTY" : "LOADED");

    if (botToken.isEmpty()) {
        qCritical() << "Bot token is missing in config.ini! Please enter the token and restart the application.";
        QCoreApplication::exit(1);
    } else {
        qInfo() << "Bot token loaded successfully.";
    }
}


void Bot::startPolling() {
    qDebug() << "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!";
    getUpdates();
}



void Bot::getUpdates() {
    QString url = QString("https://api.telegram.org/bot%1/getUpdates?offset=%2&timeout=30")
    .arg(botToken)
        .arg(lastUpdateId + 1);

    qDebug() << "üîπ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Telegram API:" << url;

    QNetworkRequest request(url);
    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ:" << reply->errorString();
            reply->deleteLater();
            QTimer::singleShot(5000, this, &Bot::getUpdates);
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonResponse = QJsonDocument::fromJson(responseData);
        QJsonObject jsonObject = jsonResponse.object();

        qDebug() << "üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram API:" << jsonObject;

        if (!jsonObject["ok"].toBool()) {
            qWarning() << "‚ùå Telegram API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ–º–∏–ª–∫—É!" << jsonObject;
            reply->deleteLater();
            return;
        }

        QJsonArray updates = jsonObject["result"].toArray();
        qDebug() << "üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:" << updates.size();

        for (const QJsonValue &update : updates) {
            QJsonObject updateObj = update.toObject();
            qint64 updateId = updateObj["update_id"].toVariant().toLongLong();

            if (updateId > lastUpdateId) {
                lastUpdateId = updateId;
                qDebug() << "üîπ –û–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π updateId:" << lastUpdateId;

                QJsonObject message;

                // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–µ –ø–æ–ª–µ —î: `message` –∞–±–æ `edited_message`
                if (updateObj.contains("message")) {
                    message = updateObj["message"].toObject();
                } else if (updateObj.contains("edited_message")) {
                    message = updateObj["edited_message"].toObject();
                }

                if (message.isEmpty()) {
                    qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ `message` –∞–±–æ `edited_message`. –ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:" << updateObj;
                    return;
                }

                // üîπ –û—Ç—Ä–∏–º—É—î–º–æ chat_id
                qint64 chatId = message["chat"].toObject()["id"].toVariant().toLongLong();

                if (chatId == 0) {
                    qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω–æ chatId = 0! –ü–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << message;
                    return;
                }

                QString text = message["text"].toString();
                qDebug() << "üîπ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << text;

                // üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
                if (!authorizeUser(chatId)) {
                    qWarning() << "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:" << chatId;
                    sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.","");
                    return;
                }

                QString cleanText = text.simplified().trimmed();  // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
                qInfo() << "üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥" << chatId << ":" << cleanText;

                // üîπ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–Ω–æ–ø–æ–∫
                processMessage(chatId, cleanText);
            }
        }

        reply->deleteLater();
        QTimer::singleShot(2000, this, &Bot::getUpdates);
    });
}


// –ú–µ—Ç–æ–¥ authorizeUser() (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
bool Bot::authorizeUser(qint64 chatId) {
    if (!isUserAuthorized(chatId)) {
        qWarning() << "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:" << chatId;
        return false;
    }
    return true;
}
//–ú–µ—Ç–æ–¥ processMessage() (–æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —ñ –∫–Ω–æ–ø–æ–∫)
void Bot::processMessage(qint64 chatId, const QString &text) {
    QString cleanText = text.simplified().trimmed();  // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏

    // üîπ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–∏
    if (cleanText == "üìú –î–æ–ø–æ–º–æ–≥–∞") cleanText = "/help";
    if (cleanText == "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤") cleanText = "/clients";
    if (cleanText == "üöÄ –ü–æ—á–∞—Ç–∏") cleanText = "/start";
    if (cleanText == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") cleanText = "/start";  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–Ω–æ–ø–∫–∏ "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"

    qInfo() << "üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥" << chatId << ":" << cleanText;

    // üîπ –Ø–∫—â–æ –±–æ—Ç –æ—á—ñ–∫—É—î –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É ‚Äì –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è
    if (waitingForTerminal) {
        processTerminalInput(chatId, cleanText);
        return;
    }

    // üîπ –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äì –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä
    if (clientIdMap.contains(cleanText)) {
        processClientSelection(chatId, cleanText);
        return;
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    if (!cleanText.startsWith("/")) {
        sendMessage(chatId, "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é!","");
    } else if (cleanText == "/start") {
        handleStartCommand(chatId);
    } else if (cleanText == "/help") {
        handleHelpCommand(chatId);
    } else if (cleanText == "/clients") {
        handleClientsCommand(chatId);
    } else {
        sendMessage(chatId, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.","");
    }
}

//–ú–µ—Ç–æ–¥ processClientSelection() (–æ–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞)
void Bot::processClientSelection(qint64 chatId, const QString &clientName) {
    qint64 clientId = clientIdMap[clientName];
    lastSelectedClientId = clientId;

    qInfo() << "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞:" << clientName << "(ID:" << clientId << ")";

    sendMessage(chatId, "üè™ –ú–µ—Ä–µ–∂–∞ –ê–ó–° - " + clientName + ".\n–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:","");
    waitingForTerminal = true;
}
/**
 * @brief –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
 * @param chatId ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param cleanText –í–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç (–Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É)
 */
void Bot::processTerminalInput(qint64 chatId, const QString &cleanText) {
    bool ok;
    int terminalNumber = cleanText.toInt(&ok);

    if (ok) {
        qInfo() << "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:" << terminalNumber;
        waitingForTerminal = false;  // –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

        // üîπ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —É Palant√≠r
        fetchTerminalInfo(chatId, lastSelectedClientId, terminalNumber);
    } else {
        sendMessage(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å **—á–∏—Å–ª–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É**.","");
    }
}

/**
 * @brief –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç —É Palant√≠r –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª
 * @param chatId ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param clientId ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @param terminalId –ù–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
 */
void Bot::fetchTerminalInfo(qint64 chatId, qint64 clientId, int terminalId) {
    // üîπ –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ API Palant√≠r
    QUrl url(QString("http://localhost:8181/terminal_info?client_id=%1&terminal_id=%2")
                 .arg(clientId).arg(terminalId));

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() == QNetworkReply::NoError) {
            QByteArray responseData = reply->readAll();
            processTerminalInfo(chatId, responseData);
        } else {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª:" << reply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª.","");
        }
        reply->deleteLater();
    });
}

/**
 * @brief –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å Palant√≠r —ñ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª
 * @param chatId ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param data –û—Ç—Ä–∏–º–∞–Ω–∞ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
 */
void Bot::processTerminalInfo(qint64 chatId, const QByteArray &data) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON!";
        sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.","");
        return;
    }

    QJsonObject jsonObj = jsonDoc.object();

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (jsonObj.contains("error")) {
        sendMessage(chatId, "‚ùå " + jsonObj["error"].toString(),"");
        return;
    }

    // üîπ –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    QString clientName = jsonObj["client_name"].toString();
    int terminalId = jsonObj["terminal_id"].toInt();
    QString address = jsonObj["adress"].toString();
    QString phone = jsonObj["phone"].toString();

    // üîπ –†–æ–±–∏–º–æ –Ω–æ–º–µ—Ä –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º —á–µ—Ä–µ–∑ HTML
    QString responseMessage = QString(
                                  "üè™ <b>–ú–µ—Ä–µ–∂–∞ –ê–ó–°:</b> %1\n"
                                  "‚õΩ <b>–ù–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:</b> %2\n"
                                  "üìç <b>–ê–¥—Ä–µ—Å–∞:</b> %3\n"
                                  "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href=\"tel:%4\">%4</a>"
                                  ).arg(clientName).arg(terminalId).arg(address).arg(phone);

    // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    sendMessage(chatId, responseMessage, "HTML");

    // üîπ –ü—ñ—Å–ª—è –≤–∏–≤–æ–¥—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    handleStartCommand(chatId);
}




void Bot::handleStartCommand(qint64 chatId) {
    qInfo() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    QJsonObject keyboard;
    QJsonArray keyboardArray;
    QJsonArray row1;
    QJsonArray row2;

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –æ–ø–∏—Å–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥
    row1.append("üìú –î–æ–ø–æ–º–æ–≥–∞");
    row1.append("üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤");
    row2.append("üöÄ –ü–æ—á–∞—Ç–∏");

    keyboardArray.append(row1);
    keyboardArray.append(row2);

    keyboard["keyboard"] = keyboardArray;
    keyboard["resize_keyboard"] = true;
    keyboard["one_time_keyboard"] = false;

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";
    payload["reply_markup"] = keyboard;

    sendMessageWithKeyboard(payload);
}


void Bot::handleHelpCommand(qint64 chatId) {
    qInfo() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /help –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    QString helpText = "‚ùì –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                       "/start - –ü–æ—á–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º\n"
                       "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                       "/clients - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤\n";

    sendMessage(chatId, helpText,"");
}

// void Bot::handleClientsCommand(qint64 chatId) {
//     lastChatId = chatId;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chat ID
//     fetchClientsList();
//     sendMessage(chatId, "üîÑ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤...");
// }

void Bot::handleClientsCommand(qint64 chatId) {
    qInfo() << "? –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /clients –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    // –ó–∞–ø–∏—Ç –¥–æ API Palantir –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
    QUrl url("http://localhost:8181/clients");
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() == QNetworkReply::NoError) {
            QByteArray responseData = reply->readAll();
            processClientsList(chatId, responseData);
        } else {
            qWarning() << "? –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤:" << reply->errorString();
            sendMessage(chatId, "? –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.","");
        }
        reply->deleteLater();
    });
}

void Bot::processClientsList(qint64 chatId, const QByteArray &data) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON!";
        sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤.","");
        return;
    }

    QJsonObject jsonObj = jsonDoc.object();
    if (!jsonObj.contains("data") || !jsonObj["data"].isArray()) {
        qWarning() << "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –º–∞—Å–∏–≤ `data` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!";
        sendMessage(chatId, "‚ùå –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.","");
        return;
    }

    QJsonArray clientsArray = jsonObj["data"].toArray();
    QJsonArray keyboardArray;
    QJsonArray row;
    int count = 0;

    clientIdMap.clear();  // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º –Ω–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å

    for (const QJsonValue &client : clientsArray) {
        QJsonObject obj = client.toObject();
        QString clientName = obj["name"].toString();
        qint64 clientId = obj["id"].toInt();

        clientIdMap[clientName] = clientId;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–ª—ñ—î–Ω—Ç–∞

        row.append(clientName);
        count++;

        if (count == 3) {
            keyboardArray.append(row);
            row = QJsonArray();
            count = 0;
        }
    }

    if (!row.isEmpty()) {
        keyboardArray.append(row);
    }

    QJsonArray backRow;
    backRow.append("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
    keyboardArray.append(backRow);

    QJsonObject keyboard;
    keyboard["keyboard"] = keyboardArray;
    keyboard["resize_keyboard"] = true;
    keyboard["one_time_keyboard"] = false;

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = "üìã –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:";
    payload["reply_markup"] = keyboard;

    sendMessageWithKeyboard(payload);
}






void Bot::fetchClientsList()
{
    QUrl url("http://localhost:8181/clients");  // –ê–¥—Ä–µ—Å–∞ API
    QNetworkRequest request(url);

    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    connect(reply, &QNetworkReply::finished, this, [this, reply]() {
        if (reply->error() == QNetworkReply::NoError) {
            QByteArray responseData = reply->readAll();
            processClientsResponse(responseData);
        } else {
            qWarning() << "HTTP Error:" << reply->errorString();
        }
        reply->deleteLater();
    });
}

void Bot::processClientsResponse(const QByteArray &data) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "Invalid JSON response";
        return;
    }

    QJsonObject jsonObj = jsonDoc.object();
    if (!jsonObj.contains("data") || !jsonObj["data"].isArray()) {
        qWarning() << "Invalid JSON format";
        return;
    }

    QJsonArray clientsArray = jsonObj["data"].toArray();
    QStringList clientsList;

    for (const QJsonValue &client : clientsArray) {
        QJsonObject obj = client.toObject();
        clientsList.append(QString("%1: %2").arg(obj["id"].toInt()).arg(obj["name"].toString()));
    }

    QString responseMessage = "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n" + clientsList.join("\n");
    qDebug() << "Clients list fetched successfully";

    // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chat ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    sendMessage(lastChatId, responseMessage,"");
}

void Bot::sendMessageWithKeyboard(const QJsonObject &payload) {
    QString url = QString("https://api.telegram.org/bot%1/sendMessage").arg(botToken);

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->post(request, QJsonDocument(payload).toJson());

    connect(reply, &QNetworkReply::finished, this, [reply]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << reply->errorString();
        } else {
            qInfo() << "‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.";
        }
        reply->deleteLater();
    });
}

bool Bot::isUserAuthorized(qint64 chatId) {
    QSettings settings(QCoreApplication::applicationDirPath() + "/config/config.ini", QSettings::IniFormat);
    QStringList whitelist = settings.value("Auth/whitelist").toString().split(",", Qt::SkipEmptyParts);

    // –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äì —É—Å—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø
    if (whitelist.isEmpty()) {
        return true;
    }

    return whitelist.contains(QString::number(chatId));
}

void Bot::sendMessage(qint64 chatId, const QString &text, const QString &parseMode = "") {
    QString url = QString("https://api.telegram.org/bot%1/sendMessage")
    .arg(botToken);

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = text;
    if (!parseMode.isEmpty()) {
        payload["parse_mode"] = parseMode;  // üîπ –í–∞–∂–ª–∏–≤–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è!
    }

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->post(request, QJsonDocument(payload).toJson());

    connect(reply, &QNetworkReply::finished, this, [reply]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << reply->errorString();
        } else {
            qInfo() << "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.";
        }
        reply->deleteLater();
    });
}


