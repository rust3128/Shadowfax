#include "bot.h"
#include "config.h"
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QNetworkReply>
#include <QDebug>
#include <QSettings>
#include <QFile>
#include <QDir>
#include <QTextStream>
#include <QCoreApplication>
#include <QDateTime>
#include <QRegularExpression>
#include <QUrlQuery>

static QFile logFile;


Bot::Bot(QObject *parent) : QObject(parent) {
    lastUpdateId = 0;  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ update_id
    networkManager = new QNetworkAccessManager(this);
    loadBotToken();
}

/**
 * @brief –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª
 */
void Bot::initLogging() {
    QString logDirPath = QCoreApplication::applicationDirPath() + "/logs";
    QDir logDir(logDirPath);
    if (!logDir.exists()) {
        logDir.mkpath(".");
    }

    QString logFilePath = logDirPath + "/shadowfax.log";
    logFile.setFileName(logFilePath);

    if (!logFile.open(QIODevice::Append | QIODevice::Text)) {
        qCritical() << "Failed to open log file for writing!";
        return;
    }

    // üîπ –û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ª–æ–≥—ñ–≤
    qInstallMessageHandler([](QtMsgType type, const QMessageLogContext &, const QString &msg) {
        QString logEntry = QString("[%1] %2")
        .arg(QDateTime::currentDateTime().toString("yyyy-MM-dd HH:mm:ss"))
            .arg(msg);

        QTextStream logStream(&logFile);
        logStream << logEntry << "\n";  // üîπ –ó–∞–ø–∏—Å—É—î–º–æ —É —Ñ–∞–π–ª
        logStream.flush();

        QTextStream consoleStream(stdout);
        consoleStream << logEntry << Qt::endl;  // üîπ –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    });

    qDebug() << "Logging initialized. Log file:" << logFilePath;
}


/**
 * @brief –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ config.ini –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
 */
void Bot::loadBotToken() {
    QString configPath = QCoreApplication::applicationDirPath() + "/config/config.ini";
    qDebug() << "Checking config file at:" << configPath;

    QFile configFile(configPath);

    // üîπ –Ø–∫—â–æ config.ini –Ω–µ —ñ—Å–Ω—É—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    if (!configFile.exists()) {
        qWarning() << "Config file not found! Creating config.ini...";

        QDir configDir(QFileInfo(configPath).absolutePath());
        if (!configDir.exists()) {
            configDir.mkpath(".");
            qDebug() << "Config directory created.";
        }

        if (configFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&configFile);
            out << "[Telegram]\n";
            out << "bot_token=\n";  // üîπ –ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω
            configFile.close();
            qCritical() << "Please enter the bot token in config.ini and restart the application.";
            QCoreApplication::exit(1);
            return;
        } else {
            qCritical() << "Failed to create config.ini!";
        }
    }

    // üîπ –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
    QSettings settings(configPath, QSettings::IniFormat);
    botToken = settings.value("Telegram/bot_token", "").toString();
    qDebug() << "Read bot token from config.ini:" << (botToken.isEmpty() ? "EMPTY" : "LOADED");

    if (botToken.isEmpty()) {
        qCritical() << "Bot token is missing in config.ini! Please enter the token and restart the application.";
        QCoreApplication::exit(1);
    } else {
        qInfo() << "Bot token loaded successfully.";
    }
}


void Bot::startPolling() {
    qDebug() << "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!";
    getUpdates();
}



void Bot::getUpdates() {
    QString url = QString("https://api.telegram.org/bot%1/getUpdates?offset=%2&timeout=30")
    .arg(botToken)
        .arg(lastUpdateId + 1);

//    qDebug() << "üîπ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Telegram API:" << url;

    QNetworkRequest request(url);
    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ:" << reply->errorString();
            reply->deleteLater();
            QTimer::singleShot(5000, this, &Bot::getUpdates);
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonResponse = QJsonDocument::fromJson(responseData);
        QJsonObject jsonObject = jsonResponse.object();

//        qDebug() << "üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram API:" << jsonObject;

        if (!jsonObject.value(QStringLiteral("ok")).toBool()) {
            qWarning() << "‚ùå Telegram API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ–º–∏–ª–∫—É!" << jsonObject;
            reply->deleteLater();
            return;
        }

        QJsonArray updates = jsonObject.value(QStringLiteral("result")).toArray();
//        qDebug() << "üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:" << updates.size();

        for (const QJsonValue &update : updates) {
            QJsonObject updateObj = update.toObject();
            qint64 updateId = updateObj.value(QStringLiteral("update_id")).toVariant().toLongLong();

            if (updateId > lastUpdateId) {
                lastUpdateId = updateId;
                qDebug() << "üîπ –û–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π updateId:" << lastUpdateId;

                QJsonObject message;

                // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–µ –ø–æ–ª–µ —î: message –∞–±–æ edited_message
                if (updateObj.contains(QStringLiteral("message"))) {
                    message = updateObj.value(QStringLiteral("message")).toObject();
                } else if (updateObj.contains(QStringLiteral("edited_message"))) {
                    message = updateObj.value(QStringLiteral("edited_message")).toObject();
                }

                if (message.isEmpty()) {
                    qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ message –∞–±–æ edited_message. –ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:" << updateObj;
                    return;
                }

                // üîπ –û—Ç—Ä–∏–º—É—î–º–æ chat_id —Ç–∞ user_id
                qint64 chatId = message.value(QStringLiteral("chat")).toObject()
                                    .value(QStringLiteral("id")).toVariant().toLongLong();
                qint64 userId = message.value(QStringLiteral("from")).toObject()
                                    .value(QStringLiteral("id")).toVariant().toLongLong();  // ‚úÖ –§—ñ–∫—Å


                if (chatId == 0) {
                    qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω–æ chatId = 0! –ü–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << message;
                    return;
                }
                QString firstName = message["from"].toObject().value("first_name").toString();
                QString lastName = message["from"].toObject().value("last_name").toString();
                QString username = message["from"].toObject().value("username").toString();
                QString text = message.value(QStringLiteral("text")).toString();
                qDebug() << "üîπ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << text;
                qDebug() << "üì© User ID:" << userId << "| Chat ID:" << chatId;  // ‚úÖ –î–æ–¥–∞—î–º–æ –≤ –ª–æ–≥ userId

                QString cleanText = text.simplified().trimmed();  // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
                qInfo() << "üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥" << userId << "(Chat ID:" << chatId << "):" << cleanText;

                // üîπ –ü–µ—Ä–µ–¥–∞—î–º–æ userId —É processMessage()
                processMessage(chatId, userId, text, firstName, lastName, username);

            }
        }

        reply->deleteLater();
        QTimer::singleShot(2000, this, &Bot::getUpdates);
    });
}


void Bot::processMessage(qint64 chatId, qint64 userId, const QString &text, const QString &firstName, const QString &lastName, const QString &username) {

    QString blacklistFilePath = QCoreApplication::applicationDirPath() + "/Config/blacklist.txt";

    QFile blacklistFile(blacklistFilePath);
    if (blacklistFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&blacklistFile);
        while (!in.atEnd()) {
            if (in.readLine().trimmed() == QString::number(userId)) {
                qDebug() << "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " << userId << " —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É! –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.";
                blacklistFile.close();
                return;  // üîπ –ë–æ—Ç –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            }
        }
        blacklistFile.close();
    }

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    if (Config::instance().useAuth()) {
        if (!isUserAuthorized(userId)) {
            qDebug() << "‚ùå Unauthorized user" << userId << "attempted to use the bot.";
            sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");

            requestAdminApproval(userId, chatId, firstName, lastName, username);
            return;
        }
    }
    QString cleanText = text.simplified().trimmed();  // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏

    // üîπ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–∏
    if (cleanText == "üìú –î–æ–ø–æ–º–æ–≥–∞") cleanText = "/help";
    if (cleanText == "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤") cleanText = "/clients";
    if (cleanText == "üöÄ –ü–æ—á–∞—Ç–∏") cleanText = "/start";
    if (cleanText == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") cleanText = "/start";
    if (cleanText == "üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω–∞–ª") cleanText = "/get_terminal_id";
    if (cleanText == "üìã –°–ø–∏—Å–æ–∫ –ê–ó–°") cleanText = "/get_azs_list";
    if (cleanText == "üí≥ –†–†–û") cleanText = "/get_rro_info";
    if (cleanText == "üõ¢ –†–µ–∑–µ—Ä–≤—É–∞—Ä–∏") cleanText = "/get_reservoir_info";
    if (cleanText == "‚õΩ –ü–†–ö") cleanText = "/get_prk_info";

    qInfo() << "üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥" << userId << "(Chat ID:" << chatId << "):" << cleanText;

    // üîπ –Ø–∫—â–æ –±–æ—Ç –æ—á—ñ–∫—É—î –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É ‚Äì –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è
    if (waitingForTerminal) {
        processTerminalInput(chatId, cleanText);
        return;
    }

    // üîπ –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äì –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä
    if (clientIdMap.contains(cleanText)) {
        processClientSelection(chatId, cleanText);
        return;
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    if (!cleanText.startsWith("/")) {
        sendMessage(chatId, "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é!");
    } else if (cleanText == "/start") {
        handleStartCommand(chatId);
    } else if (cleanText == "/help") {
        handleHelpCommand(chatId);
    } else if (cleanText == "/clients") {
        handleClientsCommand(chatId);
    } else if (cleanText.startsWith("/approve ")) {
        handleApproveCommand(chatId, userId, cleanText);
    } else if (cleanText.startsWith("/reject ")) {
        handleRejectCommand(chatId, userId, cleanText);
    } else if (cleanText == "/get_terminal_id") {
        qDebug() << "‚úÖ –í–∏–∫–ª–∏–∫–∞–Ω–æ handleTerminalSelection()!";
        handleTerminalSelection(chatId);
    } else if (cleanText == "/get_azs_list") {
        qDebug() << "‚úÖ –í–∏–∫–ª–∏–∫–∞–Ω–æ handleAzsList()!";
        handleAzsList(chatId);
    } else if (cleanText == "/get_rro_info") {
        qDebug() << "‚úÖ –í–∏–∫–ª–∏–∫–∞–Ω–æ handleRroInfo()!";
        handleRroInfo(chatId);
    } else if (cleanText == "/get_reservoir_info") {
        qDebug() << "‚úÖ –í–∏–∫–ª–∏–∫–∞–Ω–æ handleReservoirInfo()!";
        handleReservoirInfo(chatId);
    } else if (cleanText == "/get_prk_info") {
        qDebug() << "‚úÖ –í–∏–∫–ª–∏–∫–∞–Ω–æ handlePrkInfo()!";
        handlePrkInfo(chatId);
    } else {
        sendMessage(chatId, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.");
    }

}


//–ú–µ—Ç–æ–¥ processClientSelection() (–æ–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞)
void Bot::processClientSelection(qint64 chatId, const QString &clientName) {
    // qint64 clientId = clientIdMap[clientName];
    // lastSelectedClientId = clientId;

    // qInfo() << "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞:" << clientName << "(ID:" << clientId << ")";

    // sendMessage(chatId, "üè™ –ú–µ—Ä–µ–∂–∞ –ê–ó–° - " + clientName + ".\n–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:");
    // waitingForTerminal = true;
    qint64 clientId = clientIdMap[clientName];
    lastSelectedClientId = clientId;

    qInfo() << "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞:" << clientName << "(ID:" << clientId << ")";

    sendMessage(chatId, "üìå –í–∏ –≤–∏–±—Ä–∞–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞: " + clientName + ".\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", true);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    QJsonObject keyboard;
    QJsonArray keyboardArray;

    QJsonArray row1;
    row1.append("üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω–∞–ª");
    row1.append("üìã –°–ø–∏—Å–æ–∫ –ê–ó–°");

    QJsonArray row2;
    row2.append("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É

    keyboardArray.append(row1);
    keyboardArray.append(row2);

    keyboard["keyboard"] = keyboardArray;
    keyboard["resize_keyboard"] = true;
    keyboard["one_time_keyboard"] = false;

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";
    payload["reply_markup"] = keyboard;

    sendMessageWithKeyboard(payload);
}
void Bot::handleTerminalSelection(qint64 chatId) {
    sendMessage(chatId, "üè™ –í–∏ –æ–±—Ä–∞–ª–∏ —Ç–µ—Ä–º—ñ–Ω–∞–ª. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:");
    waitingForTerminal = true;  // ‚úÖ –¢–µ–ø–µ—Ä –±–æ—Ç —á–µ–∫–∞—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
}

void Bot::handleAzsList(qint64 chatId) {
    qDebug() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ handleAzsList() –¥–ª—è —á–∞—Ç—É" << chatId;

    QUrl url(QString("http://localhost:8181/azs_list?client_id=%1").arg(lastSelectedClientId));

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ê–ó–°:" << reply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ê–ó–°.");
            reply->deleteLater();
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        reply->deleteLater();

        if (!jsonDoc.isObject()) {
            qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON!";
            sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.");
            return;
        }

        QJsonObject jsonObj = jsonDoc.object();

        // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (jsonObj.contains("error")) {
            QString errorMessage = jsonObj["error"].toString();
            qWarning() << "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:" << errorMessage;
            sendMessage(chatId, "‚ùå " + errorMessage);
            return;
        }

        QJsonArray azsList = jsonObj["azs_list"].toArray();

        if (azsList.isEmpty()) {
            sendMessage(chatId, "‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ê–ó–° –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.");
            return;
        }

        // ‚úÖ –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ê–ó–°
        QString responseText = "‚õΩ <b>–°–ø–∏—Å–æ–∫ –ê–ó–°</b>\n";
        for (const QJsonValue &val : azsList) {
            QJsonObject obj = val.toObject();
            responseText += QString("üîπ %1 - %2\n")
                                .arg(obj["terminal_id"].toInt())
                                .arg(obj["name"].toString());
        }

        qDebug() << "üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n" << responseText;
        sendMessage(chatId, responseText);
    });
}


void Bot::handleReservoirInfo(qint64 chatId) {
    qDebug() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ handleReservoirsInfo() –¥–ª—è —á–∞—Ç—É" << chatId;

    QUrl url(QString("http://localhost:8181/reservoirs_info?client_id=%1&terminal_id=%2")
                 .arg(lastSelectedClientId)
                 .arg(lastSelectedTerminalId));

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∏:" << reply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∏.");
            reply->deleteLater();
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        reply->deleteLater();

        if (!jsonDoc.isObject()) {
            qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON!";
            sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.");
            return;
        }

        QJsonObject jsonObj = jsonDoc.object();

        // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (jsonObj.contains("error")) {
            QString errorMessage = jsonObj["error"].toString();
            qWarning() << "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:" << errorMessage;
            sendMessage(chatId, "‚ùå " + errorMessage);
            return;
        }

        QJsonArray reservoirs = jsonObj["reservoirs_info"].toArray();

        if (reservoirs.isEmpty()) {
            sendMessage(chatId, "‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª—É.");
            return;
        }

        // ‚úÖ –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        QString responseText = "üõ¢ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∏</b>\n";
        for (const QJsonValue &val : reservoirs) {
            QJsonObject obj = val.toObject();
            responseText += QString("üîπ <b>–†–µ–∑–µ—Ä–≤—É–∞—Ä %1</b> ‚Äì %2, %3:\n")
                                .arg(obj["tank_id"].toInt())
                                .arg(obj["name"].toString())
                                .arg(obj["shortname"].toString());
            responseText += QString("   üîΩ <b>Min:</b> %1  |  üîº <b>Max:</b> %2\n")
                                .arg(obj["minvalue"].toInt())
                                .arg(obj["maxvalue"].toInt());
            responseText += QString("   üìè <b>–†—ñ–≤–Ω–æ–º—ñ—Ä:</b> %1 - %2\n")
                                .arg(obj["deadmin"].toInt())
                                .arg(obj["deadmax"].toInt());
            responseText += QString("   üè≠ <b>–¢—Ä—É–±–æ–ø—Ä–æ–≤—ñ–¥:</b> %1\n\n")
                                .arg(obj["tubeamount"].toInt());
        }

        qDebug() << "üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n" << responseText;
        sendMessage(chatId, responseText);
    });
}



void Bot::handlePrkInfo(qint64 chatId) {
    qDebug() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ handlePrkInfo() –¥–ª—è —á–∞—Ç—É" << chatId;

    QUrl url(QString("http://localhost:8181/terminal_info?client_id=%1&terminal_id=%2")
                 .arg(lastSelectedClientId).arg(lastSelectedTerminalId));

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ü–†–ö:" << reply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ü–†–ö.");
            reply->deleteLater();
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        reply->deleteLater();

        if (!jsonDoc.isObject()) {
            qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON!";
            sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.");
            return;
        }

        QJsonObject jsonObj = jsonDoc.object();

        // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (jsonObj.contains("error")) {
            QString errorMessage = jsonObj["error"].toString();
            qWarning() << "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:" << errorMessage;
            sendMessage(chatId, "‚ùå " + errorMessage);
            return;
        }

        // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ `dispensers_info`
        QJsonArray dispensers = jsonObj["dispensers_info"].toArray();
        QString responseText = "<b>–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ü–†–ö</b>\n";

        if (dispensers.isEmpty()) {
            responseText += "‚ÑπÔ∏è –î–∞–Ω—ñ –ø—Ä–æ –ü–†–ö –≤—ñ–¥—Å—É—Ç–Ω—ñ.";
        } else {
            for (const QJsonValue &dispenserVal : dispensers) {
                QJsonObject dispenserObj = dispenserVal.toObject();
                int dispenserId = dispenserObj["dispenser_id"].toInt();
                QString protocol = dispenserObj["protocol"].toString();
                int port = dispenserObj["port"].toInt();
                int speed = dispenserObj["speed"].toInt();
                int address = dispenserObj["address"].toInt();

                responseText += QString("üîπ <b>–ü–†–ö %1:</b> %2, –ø–æ—Ä—Ç %3, —à–≤–∏–¥–∫—ñ—Å—Ç—å %4, –∞–¥—Ä–µ—Å–∞ %5\n")
                                    .arg(dispenserId).arg(protocol).arg(port).arg(speed).arg(address);

                if (dispenserObj.contains("pumps_info")) {
                    QJsonArray pumps = dispenserObj["pumps_info"].toArray();
                    for (int i = 0; i < pumps.size(); ++i) {
                        QJsonObject pumpObj = pumps[i].toObject();
                        int pumpId = pumpObj["pump_id"].toInt();
                        int tankId = pumpObj["tank_id"].toInt();
                        QString fuel = pumpObj["fuel_shortname"].toString();

                        if (i == pumps.size() - 1) {
                            responseText += QString("  ‚îî üõ† –ü—ñ—Å—Ç–æ–ª–µ—Ç %1 (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä %2) ‚Äì %3\n")
                                                .arg(pumpId).arg(tankId).arg(fuel);
                        } else {
                            responseText += QString("  ‚îú üõ† –ü—ñ—Å—Ç–æ–ª–µ—Ç %1 (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä %2) ‚Äì %3\n")
                                                .arg(pumpId).arg(tankId).arg(fuel);
                        }
                    }
                }
            }
        }

        sendMessage(chatId, responseText);
    });
}



void Bot::handleRroInfo(qint64 chatId) {
    qDebug() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ handleRroInfo() –¥–ª—è —á–∞—Ç—É" << chatId;

    QUrl posUrl(QString("http://localhost:8181/pos_info?client_id=%1&terminal_id=%2")
                    .arg(lastSelectedClientId).arg(lastSelectedTerminalId));  // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π terminalId

    QNetworkRequest posRequest(posUrl);
    posRequest.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *posReply = networkManager->get(posRequest);

    connect(posReply, &QNetworkReply::finished, this, [this, posReply, chatId]() mutable {
        if (posReply->error() == QNetworkReply::NoError) {
            QByteArray posData = posReply->readAll();
            QJsonDocument posJsonDoc = QJsonDocument::fromJson(posData);

            if (posJsonDoc.isObject()) {
                QJsonObject posJsonObj = posJsonDoc.object();
                QJsonArray posInfoArray = posJsonObj["pos_info"].toArray();

                // üîπ –§–æ—Ä–º—É—î–º–æ –±–ª–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ POS
                QString responseText;
                if (!posInfoArray.isEmpty()) {
                    responseText += "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ POS</b>\n";
                    for (const QJsonValue &posVal : posInfoArray) {
                        QJsonObject posObj = posVal.toObject();
                        responseText += QString("üí≥ <b>–ö–∞—Å–∞ %1</b>\n").arg(posObj["pos_id"].toInt());

                        // üîπ –í–∏–≤–æ–¥–∏–º–æ –ó–ù —Ç–∞ –§–ù –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
                        responseText += QString("   üîπ –ó–ù: %1  |  –§–ù: %2\n")
                                            .arg(posObj["factorynumber"].toString())
                                            .arg(posObj["regnumber"].toString());

                        if (posObj.contains("pos_version") && !posObj["pos_version"].toString().isEmpty()) {
                            responseText += QString("   üîπ –í–µ—Ä—Å—ñ—è –ü–û: %1\n").arg(posObj["pos_version"].toString());
                        }

                        if (posObj.contains("db_version") && !posObj["db_version"].toString().isEmpty()) {
                            responseText += QString("   üîπ –í–µ—Ä—Å—ñ—è FB: %1\n").arg(posObj["db_version"].toString());
                        }

                        if (posObj.contains("posterm_version") && !posObj["posterm_version"].toString().isEmpty()) {
                            responseText += QString("   üîπ Bank DLL ver: %1\n").arg(posObj["posterm_version"].toString());
                        }

                        responseText += "\n";
                    }
                } else {
                    responseText = "‚ÑπÔ∏è –î–∞–Ω—ñ –ø—Ä–æ POS –≤—ñ–¥—Å—É—Ç–Ω—ñ.";
                }

                sendMessage(chatId, responseText);
            }
        } else {
            qWarning() << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ POS:" << posReply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ POS.");
        }

        posReply->deleteLater();
    });
}




/**
 * @brief –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
 * @param chatId ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param cleanText –í–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç (–Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É)
 */
void Bot::processTerminalInput(qint64 chatId, const QString &cleanText) {
    bool ok;
    int terminalNumber = cleanText.toInt(&ok);

    if (ok) {
        qInfo() << "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É:" << terminalNumber;
        waitingForTerminal = false;  // –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

        lastSelectedTerminalId = terminalNumber;  // ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω–∞–ª

        // üîπ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —É Palant√≠r
        fetchTerminalInfo(chatId, lastSelectedClientId, lastSelectedTerminalId);
    } else {
        sendMessage(chatId, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å **—á–∏—Å–ª–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É**.");
    }
}


/**
 * @brief –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç —É Palant√≠r –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª
 * @param chatId ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param clientId ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @param terminalId –ù–æ–º–µ—Ä —Ç–µ—Ä–º—ñ–Ω–∞–ª—É
 **/
void Bot::fetchTerminalInfo(qint64 chatId, qint64 clientId, int terminalId) {
    QUrl url(QString("http://localhost:8181/terminal_info?client_id=%1&terminal_id=%2")
                 .arg(clientId).arg(terminalId));

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId, clientId, terminalId]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª:" << reply->errorString();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª.");
            reply->deleteLater();
            return;
        }

        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        reply->deleteLater();

        if (!jsonDoc.isObject()) {
            qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON!";
            sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.");
            return;
        }

        QJsonObject jsonObj = jsonDoc.object();

        // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (jsonObj.contains("error")) {
            QString errorMessage = jsonObj["error"].toString();
            qWarning() << "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:" << errorMessage;
            sendMessage(chatId, "‚ùå " + errorMessage);
            return;
        }

        // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        QString clientName = jsonObj["client_name"].toString();
        QString address = jsonObj["adress"].toString();
        QString phone = jsonObj["phone"].toString();
        int terminalNumber = jsonObj["terminal_id"].toInt();

        // üìå –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        QString responseText;
        responseText += QString("üè™ <b>–ê–ó–°:</b> %1\n").arg(clientName);
        responseText += QString("‚õΩ <b>–¢–µ—Ä–º—ñ–Ω–∞–ª:</b> %1\n").arg(terminalNumber);
        responseText += QString("üìç <b>–ê–¥—Ä–µ—Å–∞:</b> %1\n").arg(address);
        responseText += QString("üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>%1</code>\n\n").arg(phone);

        sendMessage(chatId, responseText);

        // üìå –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
        QJsonObject keyboard;
        QJsonArray keyboardArray;

        QJsonArray row1;
        row1.append("üí≥ –†–†–û");
        row1.append("üõ¢ –†–µ–∑–µ—Ä–≤—É–∞—Ä–∏");
        row1.append("‚õΩ –ü–†–ö");

        QJsonArray row2;
        row2.append("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");

        keyboardArray.append(row1);
        keyboardArray.append(row2);

        keyboard["keyboard"] = keyboardArray;
        keyboard["resize_keyboard"] = true;
        keyboard["one_time_keyboard"] = false;

        QJsonObject payload;
        payload["chat_id"] = chatId;
        payload["text"] = "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:";
        payload["reply_markup"] = keyboard;

        sendMessageWithKeyboard(payload);

    });
}



// void Bot::fetchTerminalInfo(qint64 chatId, qint64 clientId, int terminalId) {
//     QUrl url(QString("http://localhost:8181/terminal_info?client_id=%1&terminal_id=%2")
//                  .arg(clientId).arg(terminalId));

//     QNetworkRequest request(url);
//     request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

//     QNetworkReply *reply = networkManager->get(request);

//     connect(reply, &QNetworkReply::finished, this, [this, reply, chatId, clientId, terminalId]() {
//         if (reply->error() != QNetworkReply::NoError) {
//             qWarning() << "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª:" << reply->errorString();
//             sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∞–ª.");
//             handleStartCommand(chatId);  // ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
//             reply->deleteLater();
//             return;
//         }

//         QByteArray responseData = reply->readAll();
//         QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
//         reply->deleteLater();

//         if (!jsonDoc.isObject()) {
//             qWarning() << "‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON!";
//             sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞.");
//             handleStartCommand(chatId);
//             return;
//         }

//         QJsonObject jsonObj = jsonDoc.object();

//         // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
//         if (jsonObj.contains("error")) {
//             QString errorMessage = jsonObj["error"].toString();
//             qWarning() << "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:" << errorMessage;
//             sendMessage(chatId, "‚ùå " + errorMessage);
//             handleStartCommand(chatId);
//             return;
//         }

//         // ‚úÖ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É
//         QString clientName = jsonObj["client_name"].toString();
//         QString adress = jsonObj["adress"].toString();
//         QString phone = jsonObj["phone"].toString();
//         QJsonArray dispensers = jsonObj["dispensers_info"].toArray();

//         // üìå –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//         QString responseText;
//         responseText += QString("üè™ <b>–ê–ó–°:</b> %1\n").arg(clientName);
//         responseText += QString("‚õΩ <b>–¢–µ—Ä–º—ñ–Ω–∞–ª:</b> %1\n").arg(jsonObj["terminal_id"].toInt());
//         responseText += QString("üìç <b>–ê–¥—Ä–µ—Å–∞:</b> %1\n").arg(adress);
//         responseText += QString("üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>%1</code>\n\n").arg(phone);



        // // üîπ –¢–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ `/pos_info`
        // QUrl posUrl(QString("http://localhost:8181/pos_info?client_id=%1&terminal_id=%2")
        //                 .arg(clientId).arg(terminalId));

        // QNetworkRequest posRequest(posUrl);
        // posRequest.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

        // QNetworkReply *posReply = networkManager->get(posRequest);

        // connect(posReply, &QNetworkReply::finished, this, [this, posReply, chatId, responseText, dispensers]() mutable {
        //     if (posReply->error() == QNetworkReply::NoError) {
        //         QByteArray posData = posReply->readAll();
        //         QJsonDocument posJsonDoc = QJsonDocument::fromJson(posData);

        //         if (posJsonDoc.isObject()) {
        //             QJsonObject posJsonObj = posJsonDoc.object();
        //             QJsonArray posInfoArray = posJsonObj["pos_info"].toArray();

        //             // üîπ –§–æ—Ä–º—É—î–º–æ –±–ª–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ POS
        //             if (!posInfoArray.isEmpty()) {
        //                 responseText += "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ POS</b>\n";
        //                 for (const QJsonValue &posVal : posInfoArray) {
        //                     QJsonObject posObj = posVal.toObject();
        //                     responseText += QString("üí≥ <b>–ö–∞—Å–∞ %1</b>\n").arg(posObj["pos_id"].toInt());

        //                     // üîπ –í–∏–≤–æ–¥–∏–º–æ –ó–ù —Ç–∞ –§–ù –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
        //                     responseText += QString("   üîπ –ó–ù: %1  |  –§–ù: %2\n")
        //                                         .arg(posObj["factorynumber"].toString())
        //                                         .arg(posObj["regnumber"].toString());

        //                     if (posObj.contains("pos_version") && !posObj["pos_version"].toString().isEmpty()) {
        //                         responseText += QString("   üîπ –í–µ—Ä—Å—ñ—è –ü–û: %1\n").arg(posObj["pos_version"].toString());
        //                     }

        //                     if (posObj.contains("db_version") && !posObj["db_version"].toString().isEmpty()) {
        //                         responseText += QString("   üîπ –í–µ—Ä—Å—ñ—è FB: %1\n").arg(posObj["db_version"].toString());
        //                     }

        //                     if (posObj.contains("posterm_version") && !posObj["posterm_version"].toString().isEmpty()) {
        //                         responseText += QString("   üîπ Bank DLL ver: %1\n").arg(posObj["posterm_version"].toString());
        //                     }

        //                     responseText += "\n";
        //                 }
        //             }

        //         }
        //     } else {
        //         qWarning() << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ POS:" << posReply->errorString();
        //     }

        //     posReply->deleteLater();

//             // üîπ –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¢–†–ö
//             responseText += "<b>–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ü–†–ö</b>\n";

//             for (const QJsonValue &dispenserVal : dispensers) {
//                 QJsonObject dispenserObj = dispenserVal.toObject();
//                 int dispenserId = dispenserObj["dispenser_id"].toInt();
//                 QString protocol = dispenserObj["protocol"].toString();
//                 int port = dispenserObj["port"].toInt();
//                 int speed = dispenserObj["speed"].toInt();
//                 int address = dispenserObj["address"].toInt();

//                 responseText += QString("üîπ <b>–ü–†–ö %1:</b> %2, –ø–æ—Ä—Ç %3, —à–≤–∏–¥–∫—ñ—Å—Ç—å %4, –∞–¥—Ä–µ—Å–∞ %5\n")
//                                     .arg(dispenserId).arg(protocol).arg(port).arg(speed).arg(address);

//                 if (dispenserObj.contains("pumps_info")) {
//                     QJsonArray pumps = dispenserObj["pumps_info"].toArray();
//                     for (int i = 0; i < pumps.size(); ++i) {
//                         QJsonObject pumpObj = pumps[i].toObject();
//                         int pumpId = pumpObj["pump_id"].toInt();
//                         int tankId = pumpObj["tank_id"].toInt();
//                         QString fuel = pumpObj["fuel_shortname"].toString();

//                         if (i == pumps.size() - 1) {
//                             responseText += QString("  ‚îî üõ† –ü—ñ—Å—Ç–æ–ª–µ—Ç %1 (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä %2) ‚Äì %3\n")
//                                                 .arg(pumpId).arg(tankId).arg(fuel);
//                         } else {
//                             responseText += QString("  ‚îú üõ† –ü—ñ—Å—Ç–æ–ª–µ—Ç %1 (—Ä–µ–∑–µ—Ä–≤—É–∞—Ä %2) ‚Äì %3\n")
//                                                 .arg(pumpId).arg(tankId).arg(fuel);
//                         }
//                     }
//                 }
//             }

//             qDebug() << "üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n" << responseText;

//             // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
//             sendMessage(chatId, responseText);
//         });
//     });
// }




void Bot::handleStartCommand(qint64 chatId) {
    qInfo() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    QJsonObject keyboard;
    QJsonArray keyboardArray;
    QJsonArray row1;
    QJsonArray row2;

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –æ–ø–∏—Å–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥
    row1.append("üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤");
    row1.append("üìú –î–æ–ø–æ–º–æ–≥–∞");

    row2.append("üöÄ –ü–æ—á–∞—Ç–∏");

    keyboardArray.append(row1);
    keyboardArray.append(row2);

    keyboard["keyboard"] = keyboardArray;
    keyboard["resize_keyboard"] = true;
    keyboard["one_time_keyboard"] = false;

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";
    payload["reply_markup"] = keyboard;

    sendMessageWithKeyboard(payload);
}


void Bot::handleHelpCommand(qint64 chatId) {
    qInfo() << "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /help –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    QString helpText = "‚ùì –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                       "/start - –ü–æ—á–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º\n"
                       "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                       "/clients - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤\n";

    sendMessage(chatId, helpText);
}


void Bot::handleClientsCommand(qint64 chatId) {
    qInfo() << "? –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /clients –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" << chatId;

    // –ó–∞–ø–∏—Ç –¥–æ API Palantir –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
    QUrl url("http://localhost:8181/clients");
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    connect(reply, &QNetworkReply::finished, this, [this, reply, chatId]() {
        if (reply->error() == QNetworkReply::NoError) {
            QByteArray responseData = reply->readAll();
            processClientsList(chatId, responseData);
        } else {
            qWarning() << "? –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤:" << reply->errorString();
            sendMessage(chatId, "? –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.");
        }
        reply->deleteLater();
    });
}

void Bot::processClientsList(qint64 chatId, const QByteArray &data) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON!";
        sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤.");
        return;
    }

    QJsonObject jsonObj = jsonDoc.object();
    if (!jsonObj.contains("data") || !jsonObj["data"].isArray()) {
        qWarning() << "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –º–∞—Å–∏–≤ data —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!";
        sendMessage(chatId, "‚ùå –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.");
        return;
    }

    QJsonArray clientsArray = jsonObj["data"].toArray();
    QJsonArray keyboardArray;
    QJsonArray row;
    int count = 0;

    clientIdMap.clear();  // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º –Ω–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å

    for (const QJsonValue &client : clientsArray) {
        QJsonObject obj = client.toObject();
        QString clientName = obj["name"].toString();
        qint64 clientId = obj["id"].toInt();

        clientIdMap[clientName] = clientId;  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–ª—ñ—î–Ω—Ç–∞

        row.append(clientName);
        count++;

        if (count == 3) {
            keyboardArray.append(row);
            row = QJsonArray();
            count = 0;
        }
    }

    if (!row.isEmpty()) {
        keyboardArray.append(row);
    }

    QJsonArray backRow;
    backRow.append("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é");
    keyboardArray.append(backRow);

    QJsonObject keyboard;
    keyboard["keyboard"] = keyboardArray;
    keyboard["resize_keyboard"] = true;
    keyboard["one_time_keyboard"] = false;

    QJsonObject payload;
    payload["chat_id"] = chatId;
    payload["text"] = "üìã –í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:";
    payload["reply_markup"] = keyboard;

    sendMessageWithKeyboard(payload);
}

void Bot::fetchClientsList()
{
    QUrl url("http://localhost:8181/clients");  // –ê–¥—Ä–µ—Å–∞ API
    QNetworkRequest request(url);

    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->get(request);

    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    connect(reply, &QNetworkReply::finished, this, [this, reply]() {
        if (reply->error() == QNetworkReply::NoError) {
            QByteArray responseData = reply->readAll();
            processClientsResponse(responseData);
        } else {
            qWarning() << "HTTP Error:" << reply->errorString();
        }
        reply->deleteLater();
    });
}

void Bot::processClientsResponse(const QByteArray &data) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "Invalid JSON response";
        return;
    }

    QJsonObject jsonObj = jsonDoc.object();
    if (!jsonObj.contains("data") || !jsonObj["data"].isArray()) {
        qWarning() << "Invalid JSON format";
        return;
    }

    QJsonArray clientsArray = jsonObj["data"].toArray();
    QStringList clientsList;

    for (const QJsonValue &client : clientsArray) {
        QJsonObject obj = client.toObject();
        clientsList.append(QString("%1: %2").arg(obj["id"].toInt()).arg(obj["name"].toString()));
    }

    QString responseMessage = "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n" + clientsList.join("\n");
    qDebug() << "Clients list fetched successfully";

    // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chat ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    sendMessage(lastChatId, responseMessage);
}

void Bot::sendMessageWithKeyboard(const QJsonObject &payload) {
    QString url = QString("https://api.telegram.org/bot%1/sendMessage").arg(botToken);

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = networkManager->post(request, QJsonDocument(payload).toJson());

    connect(reply, &QNetworkReply::finished, this, [reply]() {
        if (reply->error() != QNetworkReply::NoError) {
            qWarning() << "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:" << reply->errorString();
        } else {
            qInfo() << "‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.";
        }
        reply->deleteLater();
    });
}


void Bot::sendMessage(qint64 chatId, const QString &text, bool isHtml) {
    QUrl url(QString("https://api.telegram.org/bot%1/sendMessage").arg(botToken));

    QUrlQuery query;
    query.addQueryItem("chat_id", QString::number(chatId));
    query.addQueryItem("text", text);

    if (isHtml) {
        query.addQueryItem("parse_mode", "HTML");  // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É HTML
    }

    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");

    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    manager->post(request, query.toString(QUrl::FullyEncoded).toUtf8());
}

void Bot::requestAdminApproval(qint64 userId, qint64 chatId, const QString &firstName, const QString &lastName, const QString &username) {
    QString adminsFilePath = QCoreApplication::applicationDirPath() + "/Config/admins.txt";

    QFile file(adminsFilePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qWarning() << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ admins.txt –∑–∞ —à–ª—è—Ö–æ–º:" << adminsFilePath;
        return;
    }

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–∞–ø–∏—Å—É —É `users.txt`
    lastApprovalRequest[userId] = std::make_tuple(firstName, lastName, username);

    // üîπ –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    QString userInfo = QString("üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %1 (Chat ID: %2)").arg(userId).arg(chatId);

    if (!firstName.isEmpty()) userInfo += QString("\n   üë§ –Ü–º'—è: %1").arg(firstName);
    if (!lastName.isEmpty()) userInfo += QString("\n   üè∑ –ü—Ä—ñ–∑–≤–∏—â–µ: %1").arg(lastName);
    if (!username.isEmpty()) userInfo += QString("\n   üí¨ Telegram: @%1").arg(username);

    userInfo += QString("\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \n/approve %1 –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ \n/reject %1 –¥–ª—è –≤—ñ–¥–º–æ–≤–∏.").arg(userId);

    QTextStream in(&file);
    while (!in.atEnd()) {
        QString adminId = in.readLine().trimmed();
        if (!adminId.isEmpty()) {
            sendMessage(adminId.toLongLong(), userInfo);
        }
    }

    file.close();
}



bool Bot::isUserAuthorized(qint64 userId) {
    QString usersFilePath = QCoreApplication::applicationDirPath() + "/Config/users.txt";
    QString blacklistFilePath = QCoreApplication::applicationDirPath() + "/Config/blacklist.txt";

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ userId —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    QFile blacklistFile(blacklistFilePath);
    if (blacklistFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&blacklistFile);
        while (!in.atEnd()) {
            if (in.readLine().trimmed() == QString::number(userId)) {
                qDebug() << "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " << userId << " —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É!";
                blacklistFile.close();
                return false;
            }
        }
        blacklistFile.close();
    }

    // üîπ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–∂–¥–∏ –º–∞—î –¥–æ—Å—Ç—É–ø
    if (userId == Config::instance().getAdminID().toLongLong()) {
        return true;
    }

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ `users.txt`
    QFile userFile(usersFilePath);
    if (!userFile.exists()) {
        qDebug() << "users.txt –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ...";
        return false;
    }

    if (!userFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qWarning() << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ users.txt";
        return false;
    }

    QTextStream userIn(&userFile);
    while (!userIn.atEnd()) {
        QString line = userIn.readLine().trimmed();
        QStringList parts = line.split("#");
        QString storedUserId = parts[0].trimmed();  // üîπ –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º

        if (storedUserId == QString::number(userId)) {
            userFile.close();
            return true;
        }
    }

    userFile.close();
    return false;
}


void Bot::handleApproveCommand(qint64 chatId, qint64 userId, const QString &text) {
    QString usersFilePath = QCoreApplication::applicationDirPath() + "/Config/users.txt";

    QStringList parts = text.split(" ");
    if (parts.size() < 2) {
        sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /approve <user_id>");
        return;
    }

    qint64 approvedUserId = parts[1].toLongLong();

    if (isUserAuthorized(approvedUserId)) {
        sendMessage(chatId, "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " + parts[1] + " –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø.");
        return;
    }

    QFile file(usersFilePath);
    if (!file.open(QIODevice::Append | QIODevice::Text)) {
        sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ users.txt");
        return;
    }

    QTextStream out(&file);
    out << approvedUserId;

    // üîπ –î–æ–¥–∞—î–º–æ —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ Telegram username
    QString userInfo;
    if (lastApprovalRequest.contains(approvedUserId)) {
        auto [firstName, lastName, username] = lastApprovalRequest[approvedUserId];
        if (!firstName.isEmpty()) userInfo += " " + firstName;
        if (!lastName.isEmpty()) userInfo += " " + lastName;
        if (!username.isEmpty()) userInfo += " (@" + username + ")";
    }

    if (!userInfo.isEmpty()) {
        out << " #" << userInfo.trimmed();
    }

    out << "\n";
    file.close();

    sendMessage(chatId, "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " + parts[1] + " —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!");
    sendMessage(approvedUserId, "‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–¥–∞–≤ –≤–∞–º –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞.");
}




void ensureAdminExists() {
    QString adminsFilePath = QCoreApplication::applicationDirPath() + "/Config/admins.txt";

    QDir dir(QCoreApplication::applicationDirPath() + "/Config");
    if (!dir.exists()) {
        dir.mkpath(".");
    }

    QFile file(adminsFilePath);
    if (!file.open(QIODevice::ReadWrite | QIODevice::Text)) {
        qWarning() << "Failed to open admins.txt";
        return;
    }

    QTextStream in(&file);
    bool found = false;
    QString adminID = Config::instance().getAdminID();

    while (!in.atEnd()) {
        if (in.readLine().trimmed() == adminID) {
            found = true;
            break;
        }
    }

    if (!found) {
        QTextStream out(&file);
        out << adminID << "\n";
        qDebug() << "Added default admin in Config/admins.txt:" << adminID;
    }

    file.close();
}

void Bot::handleRejectCommand(qint64 chatId, qint64 userId, const QString &text) {
    QString blacklistFilePath = QCoreApplication::applicationDirPath() + "/Config/blacklist.txt";

    QStringList parts = text.split(" ");
    if (parts.size() < 2) {
        sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reject <user_id>");
        return;
    }

    qint64 rejectedUserId = parts[1].toLongLong();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –≤ blacklist.txt
    QFile file(blacklistFilePath);
    if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&file);
        while (!in.atEnd()) {
            if (in.readLine().trimmed() == QString::number(rejectedUserId)) {
                sendMessage(chatId, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " + parts[1] + " —É–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.");
                file.close();
                return;
            }
        }
        file.close();
    }

    // –î–æ–¥–∞—î–º–æ userId —É blacklist.txt
    if (!file.open(QIODevice::Append | QIODevice::Text)) {
        sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ blacklist.txt");
        return;
    }

    QTextStream out(&file);
    out << rejectedUserId << "\n";
    file.close();

    sendMessage(chatId, "üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á " + parts[1] + " –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.");
}
